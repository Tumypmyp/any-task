/*
 * Anytype API
 *
 * This API enables seamless interaction with Anytype's resources - spaces, objects, properties, types, templates, and beyond.
 *
 * The version of the OpenAPI document: 2025-05-20
 * Contact: support@anytype.io
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApimodelPeriodFilter {
    /// The filter condition
    #[serde(rename = "condition", skip_serializing_if = "Option::is_none")]
    pub condition: Option<Condition>,
    #[serde(rename = "format", skip_serializing_if = "Option::is_none")]
    pub format: Option<models::ApimodelPeriodPropertyFormat>,
    /// The id of the filter
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The property key used for filtering
    #[serde(rename = "property_key", skip_serializing_if = "Option::is_none")]
    pub property_key: Option<String>,
    /// The value used for filtering
    #[serde(rename = "value", skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

impl ApimodelPeriodFilter {
    pub fn new() -> ApimodelPeriodFilter {
        ApimodelPeriodFilter {
            condition: None,
            format: None,
            id: None,
            property_key: None,
            value: None,
        }
    }
}
/// The filter condition
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Condition {
    #[serde(rename = "equal")]
    Equal,
    #[serde(rename = "not_equal")]
    NotEqual,
    #[serde(rename = "greater")]
    Greater,
    #[serde(rename = "less")]
    Less,
    #[serde(rename = "greater_or_equal")]
    GreaterOrEqual,
    #[serde(rename = "less_or_equal")]
    LessOrEqual,
    #[serde(rename = "like")]
    Like,
    #[serde(rename = "not_like")]
    NotLike,
    #[serde(rename = "in")]
    In,
    #[serde(rename = "not_in")]
    NotIn,
    #[serde(rename = "empty")]
    Empty,
    #[serde(rename = "not_empty")]
    NotEmpty,
    #[serde(rename = "all_in")]
    AllIn,
    #[serde(rename = "not_all_in")]
    NotAllIn,
    #[serde(rename = "exact_in")]
    ExactIn,
    #[serde(rename = "not_exact_in")]
    NotExactIn,
    #[serde(rename = "exists")]
    Exists,
}

impl Default for Condition {
    fn default() -> Condition {
        Self::Equal
    }
}

