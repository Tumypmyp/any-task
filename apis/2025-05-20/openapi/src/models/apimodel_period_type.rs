/*
 * Anytype API
 *
 * This API enables seamless interaction with Anytype's resources - spaces, objects, properties, types, templates, and beyond.
 *
 * The version of the OpenAPI document: 2025-05-20
 * Contact: support@anytype.io
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ApimodelPeriodType : The type of the object, or null if the type has been deleted.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApimodelPeriodType {
    /// Whether the type is archived
    #[serde(rename = "archived", skip_serializing_if = "Option::is_none")]
    pub archived: Option<bool>,
    #[serde(rename = "icon", skip_serializing_if = "Option::is_none")]
    pub icon: Option<Box<models::ApimodelPeriodIcon>>,
    /// The id of the type (which is unique across spaces)
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The key of the type (can be the same across spaces for known types)
    #[serde(rename = "key", skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The layout of the object
    #[serde(rename = "layout", skip_serializing_if = "Option::is_none")]
    pub layout: Option<Layout>,
    /// The name of the type
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The data model of the object
    #[serde(rename = "object", skip_serializing_if = "Option::is_none")]
    pub object: Option<String>,
    /// The plural name of the type
    #[serde(rename = "plural_name", skip_serializing_if = "Option::is_none")]
    pub plural_name: Option<String>,
    /// The properties linked to the type
    #[serde(rename = "properties", skip_serializing_if = "Option::is_none")]
    pub properties: Option<Vec<models::ApimodelPeriodProperty>>,
}

impl ApimodelPeriodType {
    /// The type of the object, or null if the type has been deleted.
    pub fn new() -> ApimodelPeriodType {
        ApimodelPeriodType {
            archived: None,
            icon: None,
            id: None,
            key: None,
            layout: None,
            name: None,
            object: None,
            plural_name: None,
            properties: None,
        }
    }
}
/// The layout of the object
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Layout {
    #[serde(rename = "basic")]
    ObjectLayoutBasic,
    #[serde(rename = "profile")]
    ObjectLayoutProfile,
    #[serde(rename = "action")]
    ObjectLayoutAction,
    #[serde(rename = "note")]
    ObjectLayoutNote,
    #[serde(rename = "bookmark")]
    ObjectLayoutBookmark,
    #[serde(rename = "set")]
    ObjectLayoutSet,
    #[serde(rename = "set")]
    ObjectLayoutCollection,
    #[serde(rename = "collection")]
    ObjectLayoutParticipant,
    #[serde(rename = "participant")]
    Participant,
}

impl Default for Layout {
    fn default() -> Layout {
        Self::ObjectLayoutBasic
    }
}

