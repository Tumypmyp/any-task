/*
 * Anytype API
 *
 * This API enables seamless interaction with Anytype's resources - spaces, objects, properties, types, templates, and beyond.
 *
 * The version of the OpenAPI document: 2025-05-20
 * Contact: support@anytype.io
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApimodelPeriodSort {
    #[serde(rename = "format", skip_serializing_if = "Option::is_none")]
    pub format: Option<models::ApimodelPeriodPropertyFormat>,
    /// The id of the sort
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The property key used for sorting
    #[serde(rename = "property_key", skip_serializing_if = "Option::is_none")]
    pub property_key: Option<String>,
    /// The sort direction
    #[serde(rename = "sort_type", skip_serializing_if = "Option::is_none")]
    pub sort_type: Option<SortType>,
}

impl ApimodelPeriodSort {
    pub fn new() -> ApimodelPeriodSort {
        ApimodelPeriodSort {
            format: None,
            id: None,
            property_key: None,
            sort_type: None,
        }
    }
}
/// The sort direction
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SortType {
    #[serde(rename = "asc")]
    Asc,
    #[serde(rename = "desc")]
    Desc,
    #[serde(rename = "custom")]
    Custom,
}

impl Default for SortType {
    fn default() -> SortType {
        Self::Asc
    }
}

