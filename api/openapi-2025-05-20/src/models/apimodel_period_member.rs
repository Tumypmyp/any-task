/*
 * Anytype API
 *
 * This API enables seamless interaction with Anytype's resources - spaces, objects, properties, types, templates, and beyond.
 *
 * The version of the OpenAPI document: 2025-05-20
 * Contact: support@anytype.io
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ApimodelPeriodMember : The member
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApimodelPeriodMember {
    /// The global name of the member in the network
    #[serde(rename = "global_name", skip_serializing_if = "Option::is_none")]
    pub global_name: Option<String>,
    #[serde(rename = "icon", skip_serializing_if = "Option::is_none")]
    pub icon: Option<Box<models::ApimodelPeriodIcon>>,
    /// The profile object id of the member
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The identity of the member in the network
    #[serde(rename = "identity", skip_serializing_if = "Option::is_none")]
    pub identity: Option<String>,
    /// The name of the member
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The data model of the object
    #[serde(rename = "object", skip_serializing_if = "Option::is_none")]
    pub object: Option<String>,
    /// The role of the member
    #[serde(rename = "role", skip_serializing_if = "Option::is_none")]
    pub role: Option<Role>,
    /// The status of the member
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
}

impl ApimodelPeriodMember {
    /// The member
    pub fn new() -> ApimodelPeriodMember {
        ApimodelPeriodMember {
            global_name: None,
            icon: None,
            id: None,
            identity: None,
            name: None,
            object: None,
            role: None,
            status: None,
        }
    }
}
/// The role of the member
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Role {
    #[serde(rename = "viewer")]
    Viewer,
    #[serde(rename = "editor")]
    Editor,
    #[serde(rename = "owner")]
    Owner,
    #[serde(rename = "no_permission")]
    NoPermission,
}

impl Default for Role {
    fn default() -> Role {
        Self::Viewer
    }
}
/// The status of the member
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "joining")]
    Joining,
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "removed")]
    Removed,
    #[serde(rename = "declined")]
    Declined,
    #[serde(rename = "removing")]
    Removing,
    #[serde(rename = "canceled")]
    Canceled,
}

impl Default for Status {
    fn default() -> Status {
        Self::Joining
    }
}

