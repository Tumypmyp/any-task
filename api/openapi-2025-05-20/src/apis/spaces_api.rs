/*
 * Anytype API
 *
 * This API enables seamless interaction with Anytype's resources - spaces, objects, properties, types, templates, and beyond.
 *
 * The version of the OpenAPI document: 2025-05-20
 * Contact: support@anytype.io
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`create_space`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateSpaceError {
    Status400(models::UtilPeriodValidationError),
    Status401(models::UtilPeriodUnauthorizedError),
    Status429(models::UtilPeriodRateLimitError),
    Status500(models::UtilPeriodServerError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_space`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSpaceError {
    Status401(models::UtilPeriodUnauthorizedError),
    Status404(models::UtilPeriodNotFoundError),
    Status500(models::UtilPeriodServerError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_spaces`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListSpacesError {
    Status401(models::UtilPeriodUnauthorizedError),
    Status500(models::UtilPeriodServerError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_space`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateSpaceError {
    Status400(models::UtilPeriodValidationError),
    Status401(models::UtilPeriodUnauthorizedError),
    Status403(models::UtilPeriodForbiddenError),
    Status404(models::UtilPeriodNotFoundError),
    Status429(models::UtilPeriodRateLimitError),
    Status500(models::UtilPeriodServerError),
    UnknownValue(serde_json::Value),
}


/// Creates a new space based on a supplied name and description in the JSON request body. The endpoint is subject to rate limiting and automatically applies default configurations such as generating a random icon and initializing the workspace with default settings (for example, a default dashboard or home page). On success, the new space’s full metadata is returned, enabling the client to immediately switch context to the new internal.
pub async fn create_space(configuration: &configuration::Configuration, anytype_version: &str, apimodel_period_create_space_request: models::ApimodelPeriodCreateSpaceRequest) -> Result<models::ApimodelPeriodSpaceResponse, Error<CreateSpaceError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_anytype_version = anytype_version;
    let p_apimodel_period_create_space_request = apimodel_period_create_space_request;

    let uri_str = format!("{}/v1/spaces", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Anytype-Version", p_anytype_version.to_string());
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_apimodel_period_create_space_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ApimodelPeriodSpaceResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ApimodelPeriodSpaceResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateSpaceError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Fetches full details about a single space identified by its space ID. The response includes metadata such as the space name, icon, and various workspace IDs (home, archive, profile, etc.). This detailed view supports use cases such as displaying space-specific settings.
pub async fn get_space(configuration: &configuration::Configuration, anytype_version: &str, space_id: &str) -> Result<models::ApimodelPeriodSpaceResponse, Error<GetSpaceError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_anytype_version = anytype_version;
    let p_space_id = space_id;

    let uri_str = format!("{}/v1/spaces/{space_id}", configuration.base_path, space_id=crate::apis::urlencode(p_space_id));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Anytype-Version", p_anytype_version.to_string());
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ApimodelPeriodSpaceResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ApimodelPeriodSpaceResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetSpaceError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Retrieves a paginated list of all spaces that are accessible by the authenticated user. Each space record contains detailed information such as the space ID, name, icon (derived either from an emoji or image URL), and additional metadata. This endpoint is key to displaying a user’s workspaces.
pub async fn list_spaces(configuration: &configuration::Configuration, anytype_version: &str, offset: Option<i32>, limit: Option<i32>) -> Result<models::PaginationPeriodPaginatedResponseApimodelSpace, Error<ListSpacesError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_anytype_version = anytype_version;
    let p_offset = offset;
    let p_limit = limit;

    let uri_str = format!("{}/v1/spaces", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_offset {
        req_builder = req_builder.query(&[("offset", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Anytype-Version", p_anytype_version.to_string());
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::PaginationPeriodPaginatedResponseApimodelSpace`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::PaginationPeriodPaginatedResponseApimodelSpace`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ListSpacesError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Updates the name or description of an existing space. The request body should contain the new name and/or description in JSON format. This endpoint is useful for renaming or rebranding a workspace without needing to recreate it. The updated space’s metadata is returned in the response.
pub async fn update_space(configuration: &configuration::Configuration, anytype_version: &str, space_id: &str, apimodel_period_update_space_request: models::ApimodelPeriodUpdateSpaceRequest) -> Result<models::ApimodelPeriodSpaceResponse, Error<UpdateSpaceError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_anytype_version = anytype_version;
    let p_space_id = space_id;
    let p_apimodel_period_update_space_request = apimodel_period_update_space_request;

    let uri_str = format!("{}/v1/spaces/{space_id}", configuration.base_path, space_id=crate::apis::urlencode(p_space_id));
    let mut req_builder = configuration.client.request(reqwest::Method::PATCH, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Anytype-Version", p_anytype_version.to_string());
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_apimodel_period_update_space_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ApimodelPeriodSpaceResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ApimodelPeriodSpaceResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UpdateSpaceError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

